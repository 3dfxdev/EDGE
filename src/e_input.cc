//----------------------------------------------------------------------------
//  EDGE2 Input handling
//----------------------------------------------------------------------------
// 
//  Copyright (c) 1999-2009  The EDGE2 Team.
// 
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//----------------------------------------------------------------------------
//
//  Based on the DOOM source code, released by Id Software under the
//  following copyright:
//
//    Copyright (C) 1993-1996 by id Software, Inc.
//
//----------------------------------------------------------------------------
//
// -MH- 1998/07/02 Added key_flyup and key_flydown variables (no logic yet)
// -MH- 1998/08/18 Flyup and flydown logic
//
/// -CA- Joystick Handling is now done in e_inputjoy! 

#include "i_defs.h"
#include "i_defs_gl.h"
#include "i_sdlinc.h"


#include "dm_defs.h"
#include "dm_state.h"
#include "e_player.h"
#include "e_event.h"
#include "e_input.h"
#include "e_main.h"
#include "hu_stuff.h"
#include "m_math.h"
#include "m_misc.h"
#include "r_misc.h"
#include "z_zone.h"



extern bool CON_Responder(event_t *ev);
extern bool   M_Responder(event_t *ev);
extern bool   G_Responder(event_t *ev);

///


/// D_EVENT in CHOCOLATE DOOM (merged with e_input?!)
//
// EVENT HANDLING
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//
#define MAXEVENTS  128

static event_t events[MAXEVENTS];
static int eventhead;
static int eventtail;



//
// controls (have defaults) 
// 
int key_right;
int key_left;
int key_lookup;
int key_lookdown;
int key_lookcenter;

// -ES- 1999/03/28 Zoom Key
int key_zoom;

// -CA- 2015/5/29 Fog Key (will replace with DDF commands later)
int key_fog; //bool   gp

int key_up;
int key_down;
int key_strafeleft;
int key_straferight;
int key_fire;
int key_use;
int key_strafe;
int key_speed;
int key_autorun;
int key_nextweapon;
int key_prevweapon;
int key_map;
int key_180;
int key_talk;
int key_console;
int key_mlook;
int key_secondatk;
int key_reload;
int key_action1;
int key_action2;
int key_action3;
int key_action4;


// -MH- 1998/07/10 Flying keys
int key_flyup;
int key_flydown;

int key_weapons[10];

#define MAXPLMOVE  (forwardmove[1])

static int forwardmove[2] = {25, 50};
static int sidemove[2]    = {24, 40};
static int upwardmove[2]  = {20, 30};

static int angleturn[3] = {640, 1280, 320};  // + slow turn 
static int mlookturn[3] = {400,  800, 200};

#define SLOWTURNTICS    6

#define NUMKEYS         512
#define MAX_JOY_BUTTONS 20

#define GK_DOWN  0x01
#define GK_UP    0x02

static byte gamekeydown[NUMKEYS];
static bool  mousearray[MAX_MOUSE_BUTTONS + 1];
static bool *mousebuttons = &mousearray[1];  // allow [-1]

static int turnheld;   // for accelerative turning 
static int mlookheld;  // for accelerative mlooking 

//-------------------------------------------
// -KM-  1998/09/01 Analogue binding
// -ACB- 1998/09/06 Two-stage turning switch
//
int mouse_xaxis;
int mouse_yaxis;

int mouse_xsens;
int mouse_ysens;
///
/// Mouse Controls added, from Chocolate Doom:
///
int mousebfire = 0;
int mousebstrafe = 1;
int mousebforward = 2;

int mousebjump = -1;

int mousebstrafeleft = -1;
int mousebstraferight = -1;
int mousebbackward = -1;
int mousebuse = -1;

int mousebprevweapon = -1;
int mousebnextweapon = -1;

int joy_axis[6] = { 0, 0, 0, 0, 0, 0 };

static int joy_last_raw[6];

// The last one is ignored (AXIS_DISABLE)
static float ball_deltas[6] = {0, 0, 0, 0, 0, 0};
static float  joy_forces[6] = {0, 0, 0, 0, 0, 0};

static int mouse_ss_hack = 0;

cvar_c in_running;
cvar_c in_stageturn;
cvar_c mouse_filter;

cvar_c debug_mouse;

// Speed controls
int var_turnspeed;
int var_mlookspeed;
int var_forwardspeed;
int var_sidespeed;
int var_flyspeed;


/// menu keys:

int key_menu_activate  = KEYD_ESCAPE;
int key_menu_up        = KEYD_UPARROW;
int key_menu_down      = KEYD_DOWNARROW;
int key_menu_left      = KEYD_LEFTARROW;
int key_menu_right     = KEYD_RIGHTARROW;
int key_menu_back      = KEYD_BACKSPACE;
int key_menu_forward   = KEYD_ENTER;
int key_menu_confirm   = 'y';
int key_menu_abort     = 'n';

int key_menu_help      = KEYD_F1;
int key_menu_save      = KEYD_F2;
int key_menu_load      = KEYD_F3;
int key_menu_volume    = KEYD_F4;
int key_menu_detail    = KEYD_F5;
int key_menu_qsave     = KEYD_F6;
int key_menu_endgame   = KEYD_F7;
int key_menu_messages  = KEYD_F8;
int key_menu_qload     = KEYD_F9;
int key_menu_quit      = KEYD_F10;
int key_menu_gamma     = KEYD_F11;


static float sensitivities[16] =
{
	0.10, 0.25, 0.35, 0.50,
	0.75, 1.00, 1.56, 2.21,
	3.13, 4.42, 6.26, 8.84,
	12.5, 17.7, 25.0, 35.4
};

static float speed_factors[12] =
{
	0.15, 0.25, 0.33, 0.42,
	0.50, 0.66, 0.83, 1.00,
	1.50, 2.00, 2.80, 4.00
};


bool E_MatchesKey(int keyvar, int key)
{
	return ((keyvar >> 16) == key) ||
	       ((keyvar & 0xffff) == key);
}

bool E_IsKeyPressed(int keyvar)
{
#ifdef DEVELOPERS
	if ((keyvar >> 16) > NUMKEYS)
		I_Error("Invalid key!");
	else if ((keyvar & 0xffff) > NUMKEYS)
		I_Error("Invalid key!");
#endif

	if (gamekeydown[keyvar >> 16] & GK_DOWN)
		return true;

	if (gamekeydown[keyvar & 0xffff] & GK_DOWN)
		return true;

	return false;
}


static inline void AddKeyForce(int axis, int upkeys, int downkeys, float qty = 1.0f)
{
	//let movement keys cancel each other out
	if (E_IsKeyPressed(upkeys))
	{
		joy_forces[axis] += qty;
	}
	if (E_IsKeyPressed(downkeys))
	{
		joy_forces[axis] -= qty;
	}
}

static void UpdateForces(void)
{
	for (int k = 0; k < 6; k++)
		joy_forces[k] = 0;

	// ---Keyboard---

	AddKeyForce(AXIS_TURN,    key_right,  key_left);
	AddKeyForce(AXIS_MLOOK,   key_lookup, key_lookdown);
	AddKeyForce(AXIS_FORWARD, key_up,     key_down);
	// -MH- 1998/08/18 Fly down
	AddKeyForce(AXIS_FLY,     key_flyup,  key_flydown);
	AddKeyForce(AXIS_STRAFE,  key_straferight, key_strafeleft);

	// ---Joystick---

	/* for (int j = 0; j < 6; j++)
		UpdateJoyAxis(j); */
}

static void SetMouseButtons(unsigned int buttons_mask)
{
    int i;
	
/* 	int key = (cmd->buttons & BT_WEAPONMASK) >> BT_WEAPONSHIFT;

		if (key == BT_NEXT_WEAPON)
		{
			P_NextPrevWeapon(player, +1);
		}
		else if (key == BT_PREV_WEAPON)
		{
			P_NextPrevWeapon(player, -1);
		}
		 */
    for (i=0; i<MAX_MOUSE_BUTTONS; ++i)
    {
        unsigned int button_on = (buttons_mask & (1 << i)) != 0;
        // Detect button press:
        if (!mousebuttons[i] && button_on)
        {
            if (i == mousebprevweapon)
            {
                ///P_NextPrevWeapon(player, +1);
            }
            else if (i == mousebnextweapon)
            {
                ///P_NextPrevWeapon(player, +1);
            }
        }
	mousebuttons[i] = button_on;
    }
}


#if 0  // UNUSED ???
static int CmdChecksum(ticcmd_t * cmd)
{
	int i;
	int sum = 0;

	for (i = 0; i < (int)sizeof(ticcmd_t) / 4 - 1; i++)
		sum += ((int *)cmd)[i];

	return sum;
}
#endif

/* void E_BuildTiccmd_Other(ticcmd_t * cmd)
{
	///
	/// -AJA- very hacky stuff here to test out split-screen mode
	///

	Z_Clear(cmd, ticcmd_t, 1);

	//-- Turning --
	{
		float turn = angleturn[0] * ball_deltas[AXIS_TURN] / 64.0;

		cmd->angleturn = I_ROUND(turn);
	}

	//-- Mlook --
	{
		float mlook = mlookturn[0] * ball_deltas[AXIS_MLOOK] / 64.0;

		cmd->mlookturn = I_ROUND(mlook);
	}

	//-- Forward --
	{
		if (mouse_ss_hack & 0x6)
			cmd->forwardmove = forwardmove[1];
	}

	//-- Buttons --
	if (mouse_ss_hack & 1)
		cmd->buttons |= BT_ATTACK;

	if (mouse_ss_hack & 0x6)
		cmd->buttons |= BT_USE;

	for (int k = 0; k < 6; k++)
		ball_deltas[k] = 0;
} */

//
// E_BuildTiccmd
//
// Builds a ticcmd from all of the available inputs
//
// -ACB- 1998/07/02 Added Vertical angle checking for mlook.
// -ACB- 1998/07/10 Reformatted: I can read the code! :)
// -ACB- 1998/09/06 Apply speed controls to -KM-'s analogue controls
//
static bool allow180 = true;
static bool allowzoom = true;
static bool allowautorun = true;

void E_BuildTiccmd(ticcmd_t * cmd)
{
		///UpdateForces(); (for joystick code)

	Z_Clear(cmd, ticcmd_t, 1);

	bool strafe = E_IsKeyPressed(key_strafe);
	int  speed  = E_IsKeyPressed(key_speed) ? 1 : 0;

	if (in_running.d)
		speed = !speed;

	//
	// -KM- 1998/09/01 use two stage accelerative turning on all devices
	//
	// -ACB- 1998/09/06 Allow stage turning to be switched off for
	//                  analogue devices...
	//
	int t_speed = speed;

	if (fabs(joy_forces[AXIS_TURN]) > 0.2f)
		turnheld++;
	else
		turnheld = 0;

	// slow turn ?
	if (turnheld < SLOWTURNTICS && in_stageturn.d)
		t_speed = 2;

	int m_speed = speed;

	if (fabs(joy_forces[AXIS_MLOOK]) > 0.2f)
		mlookheld++;
	else
		mlookheld = 0;

	// slow mlook ?
	if (mlookheld < SLOWTURNTICS && in_stageturn.d)
		m_speed = 2;


	// Turning
	if (! strafe)
	{
		float turn = angleturn[t_speed] * joy_forces[AXIS_TURN];
		
		turn *= speed_factors[var_turnspeed];

		// -ACB- 1998/09/06 Angle Turn Speed Control
		turn += angleturn[t_speed] * ball_deltas[AXIS_TURN] / 64.0;

		cmd->angleturn = I_ROUND(turn);
	}

	// MLook
	{
		// -ACB- 1998/07/02 Use VertAngle for Look/up down.
		float mlook = mlookturn[m_speed] * joy_forces[AXIS_MLOOK];

		mlook *= speed_factors[var_mlookspeed];

		mlook += mlookturn[m_speed] * ball_deltas[AXIS_MLOOK] / 64.0;

		cmd->mlookturn = I_ROUND(mlook);
	}

	// Forward
	{
		float forward = forwardmove[speed] * joy_forces[AXIS_FORWARD];

		forward *= speed_factors[var_forwardspeed];

		// -ACB- 1998/09/06 Forward Move Speed Control
		forward += forwardmove[speed] * ball_deltas[AXIS_FORWARD] / 64.0;

		forward = CLAMP(-MAXPLMOVE, forward, MAXPLMOVE);

		cmd->forwardmove = I_ROUND(forward);
	}

	// Sideways
	{
		float side = sidemove[speed] * joy_forces[AXIS_STRAFE];

		if (strafe)
			side += sidemove[speed] * joy_forces[AXIS_TURN];

		side *= speed_factors[var_sidespeed];

		// -ACB- 1998/09/06 Side Move Speed Control
		side += sidemove[speed] * ball_deltas[AXIS_STRAFE] / 64.0;

		if (strafe)
			side += sidemove[speed] * ball_deltas[AXIS_TURN] / 64.0;

		side = CLAMP(-MAXPLMOVE, side, MAXPLMOVE);

		cmd->sidemove = I_ROUND(side);
	}

	// Upwards  -MH- 1998/08/18 Fly Up/Down movement
	{
		float upward = upwardmove[speed] * joy_forces[AXIS_FLY];

		upward *= speed_factors[var_flyspeed];

		upward += upwardmove[speed] * ball_deltas[AXIS_FLY] / 64.0;

		upward = CLAMP(-MAXPLMOVE, upward, MAXPLMOVE);

		cmd->upwardmove = I_ROUND(upward);
	}


	// ---Buttons---

	if (E_IsKeyPressed(key_fire))
		cmd->buttons |= BT_ATTACK;

	if (E_IsKeyPressed(key_use))
		cmd->buttons |= BT_USE;

	if (E_IsKeyPressed(key_secondatk))
		cmd->extbuttons |= EBT_SECONDATK;

	if (E_IsKeyPressed(key_reload))
		cmd->extbuttons |= EBT_RELOAD;

	if (E_IsKeyPressed(key_action1))
		cmd->extbuttons |= EBT_ACTION1;

	if (E_IsKeyPressed(key_action2))
		cmd->extbuttons |= EBT_ACTION2;

	// -ACB- 1998/07/02 Use CENTER flag to center the vertical look.
	if (E_IsKeyPressed(key_lookcenter))
		cmd->extbuttons |= EBT_CENTER;

	// -KM- 1998/11/25 Weapon change key
	for (int w = 0; w < 10; w++)
	{
		if (E_IsKeyPressed(key_weapons[w]))
		{
			cmd->buttons |= BT_CHANGE;
			cmd->buttons |= w << BT_WEAPONSHIFT;
			break;
		}
	}

	if (E_IsKeyPressed(key_nextweapon))
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_NEXT_WEAPON << BT_WEAPONSHIFT);
	}
	else if (E_IsKeyPressed(key_prevweapon))
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_PREV_WEAPON << BT_WEAPONSHIFT);
	}

	// You have to release the 180 deg turn key before you can press it again
	if (E_IsKeyPressed(key_180))
	{
		if (allow180)
			cmd->angleturn ^= (s16_t)0x8000;

		allow180 = false;
	}
	else
		allow180 = true;

	// -ES- 1999/03/28 Zoom Key
	if (E_IsKeyPressed(key_zoom))
	{
		if (allowzoom)
		{
			cmd->extbuttons |= EBT_ZOOM;
			allowzoom = false;
		}
	}
	else
		allowzoom = true;

	// -AJA- 2000/04/14: Autorun toggle
	if (E_IsKeyPressed(key_autorun))
	{
		if (allowautorun)
		{
			in_running = in_running.d ? 0 : 1;
			allowautorun = false;
		}
	}
	else
		allowautorun = true;


	cmd->chatchar = HU_DequeueChatChar();

	for (int k = 0; k < 6; k++)
		ball_deltas[k] = 0;
}

//
// Get info needed to make ticcmd_ts for the players.
// 
bool INP_Responder(event_t * ev)
{
	SDL_Keysym *sym; ///add this here for SDL stuff!

	switch (ev->type)
	{
		case ev_keydown:
			/*if (splitscreen_mode && sym >= KEYD_MOUSE1 && sym <= KEYD_MOUSE6)
			{
				mouse_ss_hack |= (1 << (sym - KEYD_MOUSE1));
				return true;
			} */

			if (ev->data1 < NUMKEYS)
			{
				gamekeydown[ev->data1] &= ~GK_UP;
				gamekeydown[ev->data1] |=  GK_DOWN;
			}

			// eat key down events 
			return true;

		case ev_keyup:
			/*if (splitscreen_mode && sym >= KEYD_MOUSE1 && sym <= KEYD_MOUSE6)
			{
				mouse_ss_hack &= ~(1 << (sym - KEYD_MOUSE1));
				return false;
			}*/

			if (ev->data1 < NUMKEYS)
			{
				gamekeydown[ev->data1] |= GK_UP;
			}

			// always let key up events filter down 
			return false;

		case ev_mouse:
		{
			float dx = ev->data2;///mouse.dx; data2: X axis mouse movement (turn).
			float dy = ev->data3;///mouse.dy; data3: Y axis mouse movement (forward/backward).
			SetMouseButtons(ev->data1);

			// perform inversion
 			if ((ev->data2+1) & 1) dx = -dx;
			if ((ev->data3+1) & 1) dy = -dy;

			/* dx *= sensitivities[mouse_xsens];
			dy *= sensitivities[mouse_ysens];
 */
			dx = ev->data2*(mouse_xsens+5)/10; 
			dy = ev->data3*(mouse_ysens+5)/10; 
	
			if (debug_mouse.d)
				I_Printf("Mouse %+04d %+04d --> %+7.2f %+7.2f\n",
				         ev->data2, ev->data3, dx, dy);

			// -AJA- 1999/07/27: Mlook key like quake's.
			if (E_IsKeyPressed(key_mlook))
			{
				ball_deltas[AXIS_TURN]  += dx;
				ball_deltas[AXIS_MLOOK] += dy;
			}
			else
			{
				ball_deltas[(mouse_xaxis+1) >> 1] += dx;
				ball_deltas[(mouse_yaxis+1) >> 1] += dy;
			}

			return true;  // eat events
		}

		default:
			break;
	}

	return false;
}

//
// Sets the turbo scale (100 is normal)
//
void E_SetTurboScale(int scale)
{
	forwardmove[0] = 25 * scale / 100;
	forwardmove[1] = 50 * scale / 100;

	sidemove[0]    = 24 * scale / 100;
	sidemove[1]    = 40 * scale / 100;
}


void E_ClearInput(void)
{
	Z_Clear(gamekeydown, byte, NUMKEYS);

	turnheld  = 0;
	mlookheld = 0;

	//mouse_ss_hack = 0;
}

//
// Finds all keys in the gamekeydown[] array which have been released
// and clears them.  The value is NOT cleared by INP_Responder() since
// that prevents very fast presses (also the mousewheel) from being
// down long enough to be noticed by E_BuildTiccmd().
//
// -AJA- 2005/02/17: added this.
//
void E_UpdateKeyState(void)
{
	for (int k = 0; k < NUMKEYS; k++)
		if (gamekeydown[k] & GK_UP)
			gamekeydown[k] = 0;
}

//
// Generate events which should release all current keys.
//
void E_ReleaseAllKeys(void)
{
	int i;
	for (i = 0; i < NUMKEYS; i++)
	{
		if (gamekeydown[i] & GK_DOWN)
		{
			event_t ev;
			ev.type = ev_keyup;
			ev.data1 = i;
			ev.data2 = 0;
            ev.data3 = 0;

			E_PostEvent(&ev);
		}
	}
}

//
// Called by the I/O functions when input is detected
//
void E_PostEvent(event_t * ev)
{
	events[eventhead] = *ev;
	eventhead = (eventhead + 1) % MAXEVENTS;

#ifdef DEBUG_KEY_EV  //!!!!
if (ev->type == ev_keydown || ev->type == ev_keyup)
{
	L_WriteDebug("EVENT @ %08x %d %s\n",
		I_ReadMicroSeconds()/1000,
		ev->value.key,
		(ev->type == ev_keyup) ? "DOWN" : "up");
}
#endif
}

//
// Send all the events of the given timestamp down the responder chain
//
void E_ProcessEvents(void)
{
	event_t *ev;

	for (; eventtail != eventhead; eventtail = (eventtail + 1) % MAXEVENTS)
	{
		ev = &events[eventtail];

		if (CON_Responder(ev))
			continue;  // Console ate the event

		if (chat_on && HU_Responder(ev))
			continue;  // let chat eat the event first of all

		if (M_Responder(ev))
			continue;  // menu ate the event

		G_Responder(ev);  // let game eat it, nobody else wanted it
	}
}


//----------------------------------------------------------------------------

typedef struct specialkey_s
{
	int key;

	const char *name;
}
specialkey_t;

static specialkey_t special_keys[] =
{
    { KEYD_RIGHTARROW, "Right Arrow" },
    { KEYD_LEFTARROW, "Left Arrow" },
    { KEYD_UPARROW, "Up Arrow" },
    { KEYD_DOWNARROW, "Down Arrow" },
    { KEYD_ESCAPE, "Escape" },
    { KEYD_ENTER, "Enter" },
    { KEYD_TAB, "Tab" },

    { KEYD_BACKSPACE, "Backspace" },
    { KEYD_EQUALS, "Equals" },
    { KEYD_MINUS, "Minus" },
    { KEYD_RSHIFT, "Shift" },
    { KEYD_RCTRL, "Ctrl" },
    { KEYD_RALT, "Alt" },
    { KEYD_INSERT, "Insert" },
    { KEYD_DELETE, "Delete" },
    { KEYD_PGDN, "PageDown" },
    { KEYD_PGUP, "PageUp" },
    { KEYD_HOME, "Home" },
    { KEYD_END, "End" },
    { KEYD_SCRLOCK,  "ScrollLock" },
    { KEYD_NUMLOCK,  "NumLock" },
    { KEYD_CAPSLOCK, "CapsLock" },
    { KEYD_END, "End" },
    { '\'', "\'" },
    { KEYD_SPACE, "Space" },
    { KEYD_TILDE, "Tilde" },
    { KEYD_PAUSE, "Pause" },

	// function keys
    { KEYD_F1,  "F1" },
    { KEYD_F2,  "F2" },
    { KEYD_F3,  "F3" },
    { KEYD_F4,  "F4" },
    { KEYD_F5,  "F5" },
    { KEYD_F6,  "F6" },
    { KEYD_F7,  "F7" },
    { KEYD_F8,  "F8" },
    { KEYD_F9,  "F9" },
    { KEYD_F10, "F10" },
    { KEYD_F11, "F11" },
    { KEYD_F12, "F12" },

	// numeric keypad
	{ KEYP_0, "KP_0" },
	{ KEYP_1, "KP_1" },
	{ KEYP_2, "KP_2" },
	{ KEYP_3, "KP_3" },
	{ KEYP_4, "KP_4" },
	{ KEYP_5, "KP_5" },
	{ KEYP_6, "KP_6" },
	{ KEYP_7, "KP_7" },
	{ KEYP_8, "KP_8" },
	{ KEYP_9, "KP_9" },
	
	{ KEYP_PERIOD,   "KP_DOT" },
	{ KEYP_PLUS,  "KP_PLUS" },
	{ KEYP_MINUS, "KP_MINUS" },
	{ KEYP_MULTIPLY,  "KP_STAR" },
	{ KEYP_DIVIDE, "KP_SLASH" },
	{ KEYP_EQUALS, "KP_EQUAL" },
	{ KEYP_ENTER, "KP_ENTER" },

	// mouse buttons
    { KEYD_MOUSE1, "Mouse1" },
    { KEYD_MOUSE2, "Mouse2" },
    { KEYD_MOUSE3, "Mouse3" },
    { KEYD_MOUSE4, "Mouse4" },
    { KEYD_MOUSE5, "Mouse5" },
    { KEYD_MOUSE6, "Mouse6" },
    { KEYD_WHEEL_UP, "Wheel Up" },
    { KEYD_WHEEL_DN, "Wheel Down" },

	// joystick buttons
    { KEYD_JOY1,  "Joy1" },
    { KEYD_JOY2,  "Joy2" },
    { KEYD_JOY3,  "Joy3" },
    { KEYD_JOY4,  "Joy4" },
    { KEYD_JOY5,  "Joy5" },
    { KEYD_JOY6,  "Joy6" },
    { KEYD_JOY7,  "Joy7" },
    { KEYD_JOY8,  "Joy8" },
    { KEYD_JOY9,  "Joy9" },
    { KEYD_JOY10, "Joy10" },
    { KEYD_JOY11, "Joy11" },
    { KEYD_JOY12, "Joy12" },
    { KEYD_JOY13, "Joy13" },
    { KEYD_JOY14, "Joy14" },
    { KEYD_JOY15, "Joy15" },

	// THE END
    { -1, NULL }
};


///In Chocolate Doom, this should be... GetTypedChar?!
const char *E_GetKeyName(int key)
{
	static char buffer[32];

	if (toupper(key) >= ',' && toupper(key) <= ']')
	{
		buffer[0] = key;
		buffer[1] = 0;

		return buffer;
	}

	for (int i = 0 ; special_keys[i].name ; i++)
	{
		if (special_keys[i].key == key)
			return special_keys[i].name;
	}

	sprintf(buffer, "Key%03d", key);

	return buffer;
}


//--- editor settings ---
// vi:ts=4:sw=4:noexpandtab
