//----------------------------------------------------------------------------
//  EDGE Input handling
//----------------------------------------------------------------------------
// 
//  Copyright (c) 1999-2009  The EDGE Team.
// 
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//----------------------------------------------------------------------------
//
//  Based on the DOOM source code, released by Id Software under the
//  following copyright:
//
//    Copyright (C) 1993-1996 by id Software, Inc.
//
//----------------------------------------------------------------------------
//
// -MH- 1998/07/02 Added key_flyup and key_flydown variables (no logic yet)
// -MH- 1998/08/18 Flyup and flydown logic
//

#include "i_defs.h"

#include "ddf/level.h"

#include "g_state.h"
#include "e_input.h"
#include "e_main.h"
#include "g_game.h"
#include "hu_stuff.h"
#include "m_math.h"
#include "m_misc.h"
#include "r_misc.h"
#include "z_zone.h"


extern bool CON_Responder(event_t *ev);
extern bool   M_Responder(event_t *ev);
extern bool   G_Responder(event_t *ev);

//
// EVENT HANDLING
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//
#define MAXEVENTS  128

static event_t events[MAXEVENTS];
static int eventhead;
static int eventtail;

//
// controls (have defaults) 
// 
key_binding_c k_forward;
key_binding_c k_back;
key_binding_c k_left;
key_binding_c k_right;

key_binding_c k_turnright;
key_binding_c k_turnleft;
key_binding_c k_lookup;
key_binding_c k_lookdown;
key_binding_c k_lookcenter;

// -ES- 1999/03/28 Zoom Key
key_binding_c k_zoom;

key_binding_c k_fire;
key_binding_c k_secondatk;
key_binding_c k_use;
key_binding_c k_strafe;
key_binding_c k_speed;
key_binding_c k_autorun;
key_binding_c k_turn180;
key_binding_c k_mlook;
key_binding_c k_reload;

// -MH- 1998/07/10 Flying keys
key_binding_c k_up;
key_binding_c k_down;

key_binding_c k_weapons[10]; // -AJA- 2009/06/20.
key_binding_c k_nextweapon;
key_binding_c k_prevweapon;

#define MAXPLMOVE  (forwardmove[1])

static int forwardmove[2] = {0x19, 0x32};
static int sidemove[2]    = {0x18, 0x28};
static int upwardmove[2]  = {0x19, 0x32};  // -MH- 1998/08/18 Up/Down movement
static int angleturn[3]   = {640, 1280, 320};  // + slow turn 

#define SLOWTURNTICS    6

#define GK_DOWN  0x01
#define GK_UP    0x02

byte gamekeydown[NUMKEYS];

static int turnheld;   // for accelerative turning 
static int mlookheld;  // for accelerative mlooking 

// toggled by autorun button.
cvar_c in_autorun;
cvar_c in_stageturn;
cvar_c in_shiftlook;

//-------------------------------------------
// -KM-  1998/09/01 Analogue binding
// -ACB- 1998/09/06 Two-stage turning switch
//

// The first one is ignored (AXIS_DISABLE)
static float analogue[6] = {0, 0, 0, 0, 0, 0};


#if 0  // UNUSED ???
static int CmdChecksum(ticcmd_t * cmd)
{
	int i;
	int sum = 0;

	for (i = 0; i < (int)sizeof(ticcmd_t) / 4 - 1; i++)
		sum += ((int *)cmd)[i];

	return sum;
}
#endif

#define MAX_JAXIS_HIST  10

class jaxis_group_c
{
public:
	cvar_c axis;
	cvar_c dead;
	cvar_c tune;

	int values[MAX_JAXIS_HIST];

public:
	jaxis_group_c() : axis(), dead(), tune()
	{ }

	~jaxis_group_c()
	{ }
};

jaxis_group_c joyaxis1, joyaxis2, joyaxis3, joyaxis4;
jaxis_group_c joyaxis5, joyaxis6, joyaxis7, joyaxis8;

static jaxis_group_c * joy_axis_groups[8] =
{
	&joyaxis1, &joyaxis2, &joyaxis3, &joyaxis4,
	&joyaxis5, &joyaxis6, &joyaxis7, &joyaxis8
};


extern int I_JoyGetAxis(int n);

static void UpdateJoyAxes(void)
{
	// TESTING CRUD !!!!
	joyaxis1.axis =  AXIS_STRAFE;
	joyaxis2.axis = -AXIS_FORWARD;
	joyaxis4.axis =  AXIS_TURN;
	joyaxis5.axis = -AXIS_MLOOK;

	joyaxis1.tune = 1.0f;
	joyaxis2.tune = 1.0f;
	joyaxis4.tune = 1.0f;
	joyaxis5.tune = 1.0f;

	for (int ja = 0; ja < 8; ja++)
	{
		jaxis_group_c *jg = joy_axis_groups[ja];
	
		for (int k = MAX_JAXIS_HIST-1; k > 0; k--)
		{
			jg->values[k] = jg->values[k-1];
		}

		jg->values[0] = I_JoyGetAxis(ja);
	}
}

static float MergeKeyJoy(int axis, key_binding_c *pos, key_binding_c *neg)
{
	float result = 0.0f;

	//let movement keys cancel each other out
	if (pos && pos->IsPressed())
		result += 1.0f;

	if (neg && neg->IsPressed())
		result -= 1.0f;
	
	for (int ja = 0; ja < 8; ja++)
	{
		jaxis_group_c *jg = joy_axis_groups[ja];

		if (abs(jg->axis.d) != axis)
			continue;

		if (jg->dead.f >= 1 || jg->tune.f <= 0)
			continue;

		float amount = jg->values[0] / 32768.0;

		SYS_ASSERT(fabs(amount) < 1.001);

		// in the dead zone ?
		if (fabs(amount) < jg->dead.f)
			continue;

		if (amount >= 0)
		{
			amount -= jg->dead.f;
			amount /= (1 - jg->dead.f);
		}
		else
		{
			amount += jg->dead.f;
			amount /= (1 - jg->dead.f);
		}

		if (jg->axis.d < 0)
			amount = -amount;

		amount = pow(amount, jg->tune.f);

		result += amount;
	}

	return CLAMP(-1.0f, result, +1.0f);
}


//
// E_BuildTiccmd
//
// Builds a ticcmd from all of the available inputs
//
// -ACB- 1998/07/02 Added Vertical angle checking for mlook.
// -ACB- 1998/07/10 Reformatted: I can read the code! :)
//
static bool allow180 = true;
static bool allowzoom = true;
static bool allowautorun = true;

void E_BuildTiccmd(ticcmd_t * cmd)
{
	UpdateJoyAxes();

	Z_Clear(cmd, ticcmd_t, 1);

	bool strafe = k_strafe.IsPressed();
	int speed   = k_speed.IsPressed() ? 1 : 0;

	if (in_autorun.d)
		speed = !speed;

	float forward = 0;
	float upward = 0;  // -MH- 1998/08/18 Fly Up/Down movement
	float side = 0;

	float turn_f = MergeKeyJoy(AXIS_TURN,  &k_turnright, &k_turnleft);
	float look_f = MergeKeyJoy(AXIS_MLOOK, &k_lookup,    &k_lookdown);

	if (fabs(turn_f) > 0.20f)
		turnheld++;
	else
		turnheld = 0;

	if (fabs(look_f) > 0.20f)
		mlookheld++;
	else
		mlookheld = 0;

	int t_speed = speed;
	int u_speed = speed;

	if (in_stageturn.d)
	{
		// slow turn ?
		if (turnheld < SLOWTURNTICS)
			t_speed = 2;

		// slow turn ?
		if (mlookheld < SLOWTURNTICS)
			u_speed = 2;
	}

	int m_speed = in_shiftlook.d ? speed : 0;

	// -ES- 1999/03/28 Zoom Key
	if (k_zoom.IsPressed())
	{
		if (allowzoom)
		{
			cmd->extbuttons |= EBT_ZOOM;
			allowzoom = false;
		}
	}
	else
		allowzoom = true;

	// -AJA- 2000/04/14: Autorun toggle
	if (k_autorun.IsPressed())
	{
		if (allowautorun)
		{
			in_autorun = in_autorun.d ? 0 : 1;
			allowautorun = false;
		}
	}
	else
		allowautorun = true;

	// You have to release the 180 deg turn key before you can press it again
	if (k_turn180.IsPressed())
	{
		if (allow180)
			cmd->angleturn = ANG180 >> 16;
		allow180 = false;
	}
	else
	{
		allow180 = true;
		cmd->angleturn = 0;
	}

	if (strafe)
	{
		side += I_ROUND(turn_f * sidemove[speed]);

		// mouse
		side += analogue[AXIS_TURN] * sidemove[speed] / 100.0;
	}
	else
	{
		cmd->angleturn -= turn_f * angleturn[t_speed];

		// mouse
		cmd->angleturn -= I_ROUND(analogue[AXIS_TURN] * angleturn[m_speed] / 128.0);
	}

	cmd->mlookturn = 0;

	if (g_mlook.d && !(map_features & MPF_NoMLook))
	{
		cmd->mlookturn += look_f * angleturn[u_speed] / 1.5f;

		// -ACB- 1998/07/02 Use CENTER flag to center the vertical look.
		if (k_lookcenter.IsPressed())
			cmd->extbuttons |= EBT_CENTER;

		// mouse
		cmd->mlookturn += I_ROUND(analogue[AXIS_MLOOK] * angleturn[m_speed] / 128.0f);
	}

	// -MH- 1998/08/18 Fly up
	if (g_true3d.d && !(map_features & MPF_NoTrue3D))
	{
		float s = MergeKeyJoy(AXIS_FLY, &k_up, &k_down);

		upward += s * upwardmove[speed];

		// mouse
		upward += analogue[AXIS_FLY] * upwardmove[speed] / 64.0;
	}

	{
		float s = MergeKeyJoy(AXIS_FORWARD, &k_forward, &k_back);

		forward += s * forwardmove[speed];

		// mouse
		forward += analogue[AXIS_FORWARD] * forwardmove[speed] / 64.0;
	}

	{
		float s = MergeKeyJoy(AXIS_STRAFE, &k_right, &k_left);

		side += s * sidemove[speed];
		
		// mouse
		side += analogue[AXIS_STRAFE] * sidemove[speed] / 64.0;
	}

	/* HANDLE BUTTONS */

	cmd->chatchar = HU_DequeueChatChar();

	if (k_fire.IsPressed())
		cmd->buttons |= BT_ATTACK;

	if (k_use.IsPressed())
		cmd->buttons |= BT_USE;

	if (k_secondatk.IsPressed())
		cmd->extbuttons |= EBT_SECONDATK;

	if (k_reload.IsPressed())
		cmd->extbuttons |= EBT_RELOAD;

	// -KM- 1998/11/25 Weapon change key
	for (int w = 0; w < 10; w++)
	{
		if (k_weapons[w].IsPressed())
		{
			cmd->buttons |= BT_CHANGE;
			cmd->buttons |= w << BT_WEAPONSHIFT;
			break;
		}
	}

	if (k_nextweapon.IsPressed())
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_NEXT_WEAPON << BT_WEAPONSHIFT);
	}
	else if (k_prevweapon.IsPressed())
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_PREV_WEAPON << BT_WEAPONSHIFT);
	}

	forward = CLAMP(-MAXPLMOVE, forward, MAXPLMOVE);
	 upward = CLAMP(-MAXPLMOVE,  upward, MAXPLMOVE);
	   side = CLAMP(-MAXPLMOVE,    side, MAXPLMOVE);

	cmd->forwardmove += I_ROUND(forward);
	cmd->sidemove    += I_ROUND(side);
	cmd->upwardmove  += I_ROUND(upward);

	// mouse
	for (int k = 0; k < 6; k++)
		analogue[k] = 0;
}

//
// Get info needed to make ticcmd_ts for the players.
// 
bool INP_Responder(event_t * ev)
{
	switch (ev->type)
	{
		case ev_keydown:
			if (ev->value.key.sym != KEYD_IGNORE &&
			    ev->value.key.sym < NUMKEYS)
			{
				gamekeydown[ev->value.key.sym] &= ~GK_UP;
				gamekeydown[ev->value.key.sym] |=  GK_DOWN;
			}

			// eat key down events 
			return true;

		case ev_keyup:
			if (ev->value.key.sym != KEYD_IGNORE &&
			    ev->value.key.sym < NUMKEYS)
			{
				gamekeydown[ev->value.key.sym] |= GK_UP;
			}

			// always let key up events filter down 
			return false;

			// -KM- 1998/09/01 Change mouse/joystick to analogue
		case ev_mouse:
		{
			float dx = ev->value.mouse.dx;
			float dy = ev->value.mouse.dy;

			if (mouse_xaxis.d < 0) dx = -dx;
			if (mouse_yaxis.d < 0) dy = -dy;

			dx *= mouse_xsens.f;
			dy *= mouse_ysens.f;

			if (abs(mouse_xaxis.d) <= AXIS_FLY)
				analogue[abs(mouse_xaxis.d)] += dx;

			if (abs(mouse_yaxis.d) <= AXIS_FLY)
				analogue[abs(mouse_yaxis.d)] += dy;
#if 0  // FIXME !!!!
				// -AJA- 1999/07/27: Mlook key like quake's.
				if ((g_mlook.d && !(map_features & MPF_NoMLook)) &&
				    k_mlook.IsPressed())
				{
					if (ev->value.analogue.axis == fabs(mouse_xaxis.d))
					{
						analogue[AXIS_TURN] += ev->value.analogue.amount;
						return true;
					}
					if (ev->value.analogue.axis == fabs(mouse_yaxis.d))
					{
						analogue[AXIS_MLOOK] += ev->value.analogue.amount;
						return true;
					}
				}
#endif
				return true;  // eat events
			}

		default:
			break;
	}

	return false;
}

//
// Sets the turbo scale (100 is normal)
//
void E_SetTurboScale(int scale)
{
	const int origforwardmove[2] = {0x19, 0x32};
	const int origsidemove[2]    = {0x18, 0x28};
	const int origupwardmove[2]  = {0x19, 0x32};

	forwardmove[0] = origforwardmove[0] * scale / 100;
	forwardmove[1] = origforwardmove[1] * scale / 100;
	sidemove[0]    = origsidemove[0] * scale / 100;
	sidemove[1]    = origsidemove[1] * scale / 100;
	upwardmove[0]  = origupwardmove[0] * scale / 100;
	upwardmove[1]  = origupwardmove[1] * scale / 100;
}


void E_ClearInput(void)
{
	Z_Clear(gamekeydown, byte, NUMKEYS);

	for (int k = 0; k < 6; k++)
		analogue[k] = 0;

	turnheld  = 0;
	mlookheld = 0;
}

//
// Finds all keys in the gamekeydown[] array which have been released
// and clears them.  The value is NOT cleared by INP_Responder() since
// that prevents very fast presses (also the mousewheel) from being
// down long enough to be noticed by E_BuildTiccmd().
//
// -AJA- 2005/02/17: added this.
//
void E_UpdateKeyState(void)
{
	for (int k = 0; k < NUMKEYS; k++)
		if (gamekeydown[k] & GK_UP)
			gamekeydown[k] = 0;
}

//
// Generate events which should release all current keys.
//
void E_ReleaseAllKeys(void)
{
	int i;
	for (i = 0; i < NUMKEYS; i++)
	{
		if (gamekeydown[i] & GK_DOWN)
		{
			event_t ev;
			
			ev.type = ev_keyup;
			ev.value.key.sym = i;
			ev.value.key.unicode = 0;
			
			E_PostEvent(&ev);
		}
	}
}

//
// Called by the I/O functions when input is detected
//
void E_PostEvent(event_t * ev)
{
	events[eventhead] = *ev;
	eventhead = (eventhead + 1) % MAXEVENTS;

#ifdef DEBUG_KEY_EV  //!!!!
if (ev->type == ev_keydown || ev->type == ev_keyup)
{
	L_WriteDebug("EVENT @ %08x %d %s\n",
		I_ReadMicroSeconds()/1000,
		ev->value.key.sym,
		(ev->type == ev_keyup) ? "DOWN" : "up");
}
#endif
}

//
// Send all the events of the given timestamp down the responder chain
//
void E_ProcessEvents(void)
{
	event_t *ev;

	for (; eventtail != eventhead; eventtail = (eventtail + 1) % MAXEVENTS)
	{
		ev = &events[eventtail];

		if (chat_on && HU_Responder(ev))
			continue;  // let chat eat the event first of all

		if (CON_Responder(ev))
			continue;  // GUI ate the event

		if (M_Responder(ev))
			continue;  // menu ate the event

		G_Responder(ev);  // let game eat it, nobody else wanted it
	}
}


//--- editor settings ---
// vi:ts=4:sw=4:noexpandtab
