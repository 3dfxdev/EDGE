//----------------------------------------------------------------------------
//  EDGE Input handling
//----------------------------------------------------------------------------
// 
//  Copyright (c) 1999-2008  The EDGE Team.
// 
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//----------------------------------------------------------------------------
//
//  Based on the DOOM source code, released by Id Software under the
//  following copyright:
//
//    Copyright (C) 1993-1996 by id Software, Inc.
//
//----------------------------------------------------------------------------
//
// -MH- 1998/07/02 Added key_flyup and key_flydown variables (no logic yet)
// -MH- 1998/08/18 Flyup and flydown logic
//

#include "i_defs.h"

#include "dm_defs.h"
#include "dm_state.h"
#include "e_event.h"
#include "e_input.h"
#include "e_main.h"
#include "hu_stuff.h"
#include "m_math.h"
#include "m_misc.h"
#include "r_misc.h"
#include "z_zone.h"


extern bool CON_Responder(event_t *ev);
extern bool   M_Responder(event_t *ev);
extern bool   G_Responder(event_t *ev);

extern int I_JoyGetAxis(int n);


//
// EVENT HANDLING
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//
#define MAXEVENTS  128

static event_t events[MAXEVENTS];
static int eventhead;
static int eventtail;

//
// controls (have defaults) 
// 
int key_right;
int key_left;
int key_lookup;
int key_lookdown;
int key_lookcenter;

// -ES- 1999/03/28 Zoom Key
int key_zoom;

int key_up;
int key_down;
int key_strafeleft;
int key_straferight;
int key_fire;
int key_use;
int key_strafe;
int key_speed;
int key_autorun;
int key_nextweapon;
int key_prevweapon;
int key_map;
int key_180;
int key_talk;
int key_console;
int key_mlook;
int key_secondatk;
int key_reload;
int key_action1;
int key_action2;

// -MH- 1998/07/10 Flying keys
int key_flyup;
int key_flydown;

#define MAXPLMOVE  (forwardmove[1])

static int forwardmove[2] = {0x19, 0x32};
static int sidemove[2]    = {0x18, 0x28};
static int upwardmove[2]  = {0x19, 0x32};  // -MH- 1998/08/18 Up/Down movement
static int angleturn[3]   = {640, 1280, 320};  // + slow turn 

#define SLOWTURNTICS    6

#define NUMKEYS         512

#define GK_DOWN  0x01
#define GK_UP    0x02

static byte gamekeydown[NUMKEYS];

static int turnheld;   // for accelerative turning 
static int mlookheld;  // for accelerative mlooking 

// toggled by autorun button.
bool autorunning = false;

//-------------------------------------------
// -KM-  1998/09/01 Analogue binding
// -ACB- 1998/09/06 Two-stage turning switch
//
int mouse_xaxis;
int mouse_yaxis;

int joy_axis[6] = { 0, 0, 0, 0, 0, 0 };

static int joy_last_raw[6];

// The last one is ignored (AXIS_DISABLE)
static float ball_deltas[6] = {0, 0, 0, 0, 0, 0};
static float  joy_forces[6] = {0, 0, 0, 0, 0, 0};

cvar_c joy_dead;
cvar_c joy_peak;
cvar_c joy_tuning;

bool stageturn;  // Stage Turn Control

int forwardmovespeed;  // Speed controls
int angleturnspeed;
int sidemovespeed;
int mlookspeed = 1000 / 64;


float JoyAxisFromRaw(int raw)
{
	SYS_ASSERT(abs(raw) <= 32768);

	float v = raw / 32768.0f;
	
	if (fabs(v) <= joy_dead.f + 0.01)
		return 0;

	if (fabs(v) >= joy_peak.f - 0.01)
		return (v < 0) ? -1.0f : +1.0f;

	SYS_ASSERT(joy_peak.f > joy_dead.f);

	float t = CLAMP(0.2f, joy_tuning.f, 5.0f);

	if (v >= 0)
	{
		v = (v - joy_dead.f) / (joy_peak.f - joy_dead.f);
		return pow(v, 1.0f / t);
	}
	else
	{
		v = (-v - joy_dead.f) / (joy_peak.f - joy_dead.f);
		return - pow(v, 1.0f / t);
	}
}

static void UpdateJoyAxis(int n)
{
	if (joy_axis[n] == AXIS_DISABLE)
		return;

	int raw = I_JoyGetAxis(n);
	int old = joy_last_raw[n];

	joy_last_raw[n] = raw;

	// cooked value = average of last two raw samples
	int cooked = (raw + old) >> 1;

	float force = JoyAxisFromRaw(cooked);

	// perform inversion
	if ((joy_axis[n]+1) & 1)
		force = -force;

	int axis = (joy_axis[n]+1) >> 1;

	joy_forces[axis] += force;
}


bool E_InputCheckKey(int keypair)
{
#ifdef DEVELOPERS
	if ((keypair >> 16) > NUMKEYS)
		I_Error("Invalid key!");
	else if ((keypair & 0xffff) > NUMKEYS)
		I_Error("Invalid key!");
#endif

	if (gamekeydown[keypair >> 16] & GK_DOWN)
		return true;
	else if (gamekeydown[keypair & 0xffff] & GK_DOWN)
		return true;
	else
		return false;
}

static inline void AddKeyForce(int axis, int upkeys, int downkeys, float qty = 1.0f)
{
	//let movement keys cancel each other out
	if (E_InputCheckKey(upkeys))
	{
		joy_forces[axis] += qty;
	}
	if (E_InputCheckKey(downkeys))
	{
		joy_forces[axis] -= qty;
	}
}

static void UpdateForces(void)
{
	for (int k = 0; k < 6; k++)
		joy_forces[k] = 0;

	// ---Keyboard---

	AddKeyForce(AXIS_TURN,    key_right,  key_left);
	AddKeyForce(AXIS_MLOOK,   key_lookup, key_lookdown);
	AddKeyForce(AXIS_FORWARD, key_up,     key_down);
	// -MH- 1998/08/18 Fly down
	AddKeyForce(AXIS_FLY,     key_flyup,  key_flydown);
	AddKeyForce(AXIS_STRAFE,  key_straferight, key_strafeleft);

	// ---Joystick---

	for (int j = 0; j < 6; j++)
		UpdateJoyAxis(j);

//??	// clamp results
//??	for (int n = 0; n < 6; n++)
//??		joy_forces[n] = CLAMP(-1.5, joy_forces[n], 1.5);
}

#if 0  // UNUSED ???
static int CmdChecksum(ticcmd_t * cmd)
{
	int i;
	int sum = 0;

	for (i = 0; i < (int)sizeof(ticcmd_t) / 4 - 1; i++)
		sum += ((int *)cmd)[i];

	return sum;
}
#endif

//
// E_BuildTiccmd
//
// Builds a ticcmd from all of the available inputs
//
// -ACB- 1998/07/02 Added Vertical angle checking for mlook.
// -ACB- 1998/07/10 Reformatted: I can read the code! :)
// -ACB- 1998/09/06 Apply speed controls to -KM-'s analogue controls
// -AJA- 1999/08/10: Reworked the GetSpeedDivisor macro.
//
#define GetSpeedDivisor(speed) \
	(((speed) == 8) ? 6 : ((8 - (speed)) << 4))

static bool allow180 = true;
static bool allowzoom = true;
static bool allowautorun = true;

void E_BuildTiccmd(ticcmd_t * cmd)
{
	UpdateForces();

	Z_Clear(cmd, ticcmd_t, 1);

	bool strafe = E_InputCheckKey(key_strafe);
	int  speed  = E_InputCheckKey(key_speed) ? 1 : 0;

	if (autorunning)
		speed = !speed;


	//
	// -KM- 1998/09/01 use two stage accelerative turning on all devices
	//
	// -ACB- 1998/09/06 Allow stage turning to be switched off for
	//                  analogue devices...
	//
	int t_speed = speed;

	if (E_InputCheckKey(key_right) || E_InputCheckKey(key_left))
		turnheld++;
	else
		turnheld = 0;

	// slow turn ?
	if (turnheld < SLOWTURNTICS)
		t_speed = 2;

	int m_speed = speed;

	if (E_InputCheckKey(key_lookup) || E_InputCheckKey(key_lookdown))
		mlookheld++;
	else
		mlookheld = 0;

	// slow turn ?
	if (mlookheld < SLOWTURNTICS)
		m_speed = 2;


	// Turning
	if (! strafe)
	{
		float turn = angleturn[t_speed] * joy_forces[AXIS_TURN];

		// -ACB- 1998/09/06 Angle Turn Speed Control
		turn += ball_deltas[AXIS_TURN] * angleturn[t_speed] /
		        (float)GetSpeedDivisor(angleturnspeed);

		cmd->angleturn = I_ROUND(turn);
	}

	// MLook
	{
		// -ACB- 1998/07/02 Use VertAngle for Look/up down.
		float mlook = angleturn[m_speed] * 0.5 * joy_forces[AXIS_MLOOK];

		mlook += ball_deltas[AXIS_MLOOK] * angleturn[m_speed] /
				(float)((21 - mlookspeed) * 16);

		cmd->mlookturn = I_ROUND(mlook);
	}

	// Forward
	{
		float forward = forwardmove[speed] * joy_forces[AXIS_FORWARD];

		// -ACB- 1998/09/06 Forward Move Speed Control
		forward += ball_deltas[AXIS_FORWARD] * forwardmove[speed] /
		           (float)GetSpeedDivisor(forwardmovespeed);

		forward = CLAMP(-MAXPLMOVE, forward, MAXPLMOVE);

		cmd->forwardmove = I_ROUND(forward);
	}

	// Sideways
	{
		float side = sidemove[speed] * joy_forces[AXIS_STRAFE];

		// -ACB- 1998/09/06 Side Move Speed Control
		side += ball_deltas[AXIS_STRAFE] * sidemove[speed] /
		        (float)GetSpeedDivisor(sidemovespeed);

		if (strafe)
		{
			side += sidemove[speed] * joy_forces[AXIS_TURN];

			side += ball_deltas[AXIS_TURN] * sidemove[speed] /
			        (float)GetSpeedDivisor(sidemovespeed);
		}

		side = CLAMP(-MAXPLMOVE, side, MAXPLMOVE);

		cmd->sidemove = I_ROUND(side);
	}

	// Upwards  -MH- 1998/08/18 Fly Up/Down movement
	{
		float upward = upwardmove[speed] * joy_forces[AXIS_FLY];

		upward += ball_deltas[AXIS_FLY] * upwardmove[speed] /
		          (float)GetSpeedDivisor(forwardmovespeed);

		upward = CLAMP(-MAXPLMOVE, upward, MAXPLMOVE);

		cmd->upwardmove = I_ROUND(upward);
	}


	// ---Buttons---

	if (E_InputCheckKey(key_fire))
		cmd->buttons |= BT_ATTACK;

	if (E_InputCheckKey(key_use))
		cmd->buttons |= BT_USE;

	if (E_InputCheckKey(key_secondatk))
		cmd->extbuttons |= EBT_SECONDATK;

	if (E_InputCheckKey(key_reload))
		cmd->extbuttons |= EBT_RELOAD;

	if (E_InputCheckKey(key_action1))
		cmd->extbuttons |= EBT_ACTION1;

	if (E_InputCheckKey(key_action2))
		cmd->extbuttons |= EBT_ACTION2;

	// -ACB- 1998/07/02 Use CENTER flag to center the vertical look.
	if (E_InputCheckKey(key_lookcenter))
		cmd->extbuttons |= EBT_CENTER;

	// -KM- 1998/11/25 Weapon change key
	for (int w = 0; w < 10; w++)
	{
		if (E_InputCheckKey('0' + w))
		{
			cmd->buttons |= BT_CHANGE;
			cmd->buttons |= w << BT_WEAPONSHIFT;
			break;
		}
	}

	if (E_InputCheckKey(key_nextweapon))
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_NEXT_WEAPON << BT_WEAPONSHIFT);
	}
	else if (E_InputCheckKey(key_prevweapon))
	{
		cmd->buttons |= BT_CHANGE;
		cmd->buttons |= (BT_PREV_WEAPON << BT_WEAPONSHIFT);
	}

	// You have to release the 180 deg turn key before you can press it again
	if (E_InputCheckKey(key_180))
	{
		if (allow180)
			cmd->angleturn ^= (s16_t)0x8000;

		allow180 = false;
	}
	else
		allow180 = true;

	// -ES- 1999/03/28 Zoom Key
	if (E_InputCheckKey(key_zoom))
	{
		if (allowzoom)
		{
			cmd->extbuttons |= EBT_ZOOM;
			allowzoom = false;
		}
	}
	else
		allowzoom = true;

	// -AJA- 2000/04/14: Autorun toggle
	if (E_InputCheckKey(key_autorun))
	{
		if (allowautorun)
		{
			autorunning  = !autorunning;
			allowautorun = false;
		}
	}
	else
		allowautorun = true;


	cmd->chatchar = HU_DequeueChatChar();

	for (int k = 0; k < 6; k++)
		ball_deltas[k] = 0;
}

//
// Get info needed to make ticcmd_ts for the players.
// 
bool INP_Responder(event_t * ev)
{
	switch (ev->type)
	{
		case ev_keydown:
			if (ev->value.key.sym < NUMKEYS)
			{
				gamekeydown[ev->value.key.sym] &= ~GK_UP;
				gamekeydown[ev->value.key.sym] |=  GK_DOWN;
			}

			// eat key down events 
			return true;

		case ev_keyup:
			if (ev->value.key.sym < NUMKEYS)
			{
				gamekeydown[ev->value.key.sym] |= GK_UP;
			}

			// always let key up events filter down 
			return false;

		case ev_mouse:
		{
			float dx = ev->value.mouse.dx;
			float dy = ev->value.mouse.dy;

			// perform inversion
			if ((mouse_xaxis+1) & 1) dx = -dx;
			if ((mouse_yaxis+1) & 1) dy = -dy;

			dx *= mouseSensitivity;
			dy *= mouseSensitivity;

			// -AJA- 1999/07/27: Mlook key like quake's.
			if (E_InputCheckKey(key_mlook))
			{
				ball_deltas[AXIS_TURN]  += dx;
				ball_deltas[AXIS_MLOOK] += dy;
			}
			else
			{
				ball_deltas[(mouse_xaxis+1) >> 1] += dx;
				ball_deltas[(mouse_yaxis+1) >> 1] += dy;
			}

			return true;  // eat events
		}

		default:
			break;
	}

	return false;
}

//
// Sets the turbo scale (100 is normal)
//
void E_SetTurboScale(int scale)
{
	const int origforwardmove[2] = {0x19, 0x32};
	const int origsidemove[2]    = {0x18, 0x28};
	const int origupwardmove[2]  = {0x19, 0x32};

	forwardmove[0] = origforwardmove[0] * scale / 100;
	forwardmove[1] = origforwardmove[1] * scale / 100;
	sidemove[0]    = origsidemove[0] * scale / 100;
	sidemove[1]    = origsidemove[1] * scale / 100;
	upwardmove[0]  = origupwardmove[0] * scale / 100;
	upwardmove[1]  = origupwardmove[1] * scale / 100;
}


void E_ClearInput(void)
{
	Z_Clear(gamekeydown, byte, NUMKEYS);

	turnheld  = 0;
	mlookheld = 0;
}

//
// Finds all keys in the gamekeydown[] array which have been released
// and clears them.  The value is NOT cleared by INP_Responder() since
// that prevents very fast presses (also the mousewheel) from being
// down long enough to be noticed by E_BuildTiccmd().
//
// -AJA- 2005/02/17: added this.
//
void E_UpdateKeyState(void)
{
	for (int k = 0; k < NUMKEYS; k++)
		if (gamekeydown[k] & GK_UP)
			gamekeydown[k] = 0;
}

//
// Generate events which should release all current keys.
//
void E_ReleaseAllKeys(void)
{
	int i;
	for (i = 0; i < NUMKEYS; i++)
	{
		if (gamekeydown[i] & GK_DOWN)
		{
			event_t ev;
			
			ev.type = ev_keyup;
			ev.value.key.sym = i;
			ev.value.key.unicode = 0;

			E_PostEvent(&ev);
		}
	}
}

//
// Called by the I/O functions when input is detected
//
void E_PostEvent(event_t * ev)
{
	events[eventhead] = *ev;
	eventhead = (eventhead + 1) % MAXEVENTS;

#ifdef DEBUG_KEY_EV  //!!!!
if (ev->type == ev_keydown || ev->type == ev_keyup)
{
	L_WriteDebug("EVENT @ %08x %d %s\n",
		I_ReadMicroSeconds()/1000,
		ev->value.key,
		(ev->type == ev_keyup) ? "DOWN" : "up");
}
#endif
}

//
// Send all the events of the given timestamp down the responder chain
//
void E_ProcessEvents(void)
{
	event_t *ev;

	for (; eventtail != eventhead; eventtail = (eventtail + 1) % MAXEVENTS)
	{
		ev = &events[eventtail];

		if (CON_Responder(ev))
			continue;  // Console ate the event

		if (chat_on && HU_Responder(ev))
			continue;  // let chat eat the event first of all

		if (M_Responder(ev))
			continue;  // menu ate the event

		G_Responder(ev);  // let game eat it, nobody else wanted it
	}
}


//--- editor settings ---
// vi:ts=4:sw=4:noexpandtab
